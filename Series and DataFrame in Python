{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled14.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "[View in Colaboratory](https://colab.research.google.com/github/Ibrahim-Alkhalil/hello-world/blob/master/Series%20and%20DataFrame%20in%20Python)"
      ]
    },
    {
      "metadata": {
        "id": "CjbYUZNQ7Yxl",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "num_defects =  [99, 52, 42, 44, 27, 22, 22, 24, 22, 21,\n",
        "                21, 18, 18, 15, 19, 19, 18, 17, 18, 16,\n",
        "                16, 17, 18, 15, 15, 13, 11, 14, 14, 13,\n",
        "                14, 14, 14, 13, 14, 14, 14, 14, 12, 14,\n",
        "                13, 12, 11, 12, 13, 13, 12, 13, 11, 13,\n",
        "                11, 12, 12, 10, 10, 11, 12, 13, 10, 12,\n",
        "                11, 10, 12, 12, 11, 11, 9, 9, 9, 11,\n",
        "                12, 8, 8, 10, 8, 10, 11, 10, 9, 10,\n",
        "                10, 8, 8, 11, 10, 9, 8, 8, 10, 10,\n",
        "                7, 7, 7, 8, 8, 7, 7, 8, 7, 7,\n",
        "                9, 7, 7, 10, 7, 8, 9, 9, 6, 6,\n",
        "                8, 8, 9, 7, 7, 9, 6, 8, 9, 8,\n",
        "                9, 9, 6, 8, 9, 7, 8, 6, 8, 6,\n",
        "                6, 6, 6, 6, 6, 8, 7, 8, 7, 5,\n",
        "                6, 8, 8, 8, 8, 5, 4, 6, 6, 4,\n",
        "                6, 6, 4, 5, 7, 5, 7, 6, 5, 4,\n",
        "                6, 4, 7, 5, 6, 4, 4, 6, 6, 3,\n",
        "                5, 6, 6, 4, 6, 3, 3, 3, 5, 5,\n",
        "                5, 3, 2, 5, 2, 3, 2, 4, 3, 2,\n",
        "                5, 2, 2, 2, 3, 4, 4, 4, 5, 5,\n",
        "                3, 5, 4, 2]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "rk59jYc27npM",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# The following enables inline plots\n",
        "# and import matplotlib.pyplot uses plt as an alias\n",
        "\n",
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "3PgYXDqi7oOx",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# importing the Counter class helps us simplify the counting process\n",
        "\n",
        "from collections import Counter"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "Kr_j0Icv8FLG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 104
        },
        "outputId": "16c1670b-14d9-45f6-cc36-8f3ee4ebba18"
      },
      "cell_type": "code",
      "source": [
        "# Let's count how many times each defect count appears\n",
        "#     and look at the five most frequent counts\n",
        "\n",
        "defect_counts = Counter(num_defects)\n",
        "\n",
        "for defect_count, freq in defect_counts.most_common(5):\n",
        "    print(defect_count, '>  ', freq)"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "8 >   24\n",
            "6 >   24\n",
            "7 >   18\n",
            "5 >   15\n",
            "9 >   14\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "_YqRVsKK-kEE",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "outputId": "02e65596-7e02-4614-933d-6fc9ba205291"
      },
      "cell_type": "code",
      "source": [
        "# We will start off by creating a series of x values\n",
        "#     and then parse the defect counts for each x value.\n",
        "# In this case, if we try to extract the value associated with a key\n",
        "#     that does not exist, we simply get back a 0.\n",
        "\n",
        "x_values = list(range(101))\n",
        "y_values = [defect_counts[x] for x in x_values]\n",
        "\n",
        "print(x_values)\n",
        "print()\n",
        "print(y_values)"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n",
            "\n",
            "[0, 0, 8, 9, 13, 15, 24, 18, 24, 14, 13, 11, 11, 9, 10, 3, 2, 2, 5, 2, 0, 2, 3, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "K0_1VNQ9DsUz",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from collections import Counter\n",
        "\n",
        "def freq_table(values):\n",
        "    \"\"\"Returns a series of values and counts in a frequency table \n",
        "    \"\"\"\n",
        "    \n",
        "    frequencies = Counter(values)\n",
        "    print('Value\\tFrequency')\n",
        "    \n",
        "    for value, count in frequencies.most_common():\n",
        "        print('{}\\t{}'.format(value, count))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "nJUY0T34Dgvw",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 104
        },
        "outputId": "4e93ead3-4fd4-43f0-e64d-e7b96616fc45"
      },
      "cell_type": "code",
      "source": [
        "freq_table([7, 8, 9, 9, 9, 6, 6])"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Value\tFrequency\n",
            "9\t3\n",
            "6\t2\n",
            "7\t1\n",
            "8\t1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "93e_bIDbD4Oy",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485
        },
        "outputId": "6e2c7fc2-9508-4e91-ce47-95bbcc6e96e7"
      },
      "cell_type": "code",
      "source": [
        "freq_table(defect_counts)"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Value\tFrequency\n",
            "8\t24\n",
            "6\t24\n",
            "7\t18\n",
            "5\t15\n",
            "9\t14\n",
            "10\t13\n",
            "4\t13\n",
            "11\t11\n",
            "12\t11\n",
            "14\t10\n",
            "13\t9\n",
            "3\t9\n",
            "2\t8\n",
            "18\t5\n",
            "22\t3\n",
            "15\t3\n",
            "21\t2\n",
            "19\t2\n",
            "17\t2\n",
            "16\t2\n",
            "99\t1\n",
            "52\t1\n",
            "42\t1\n",
            "44\t1\n",
            "27\t1\n",
            "24\t1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "PfDHoOP-ItKr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 183
        },
        "outputId": "4d80014e-13b2-4605-819a-4f4e8140b3bf"
      },
      "cell_type": "code",
      "source": [
        "values = [1, 2, 3, 4, 5, 11, 12, 13, 14, 15]\n",
        "q=mean(values)"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-20-67ee5f4a42cf>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m11\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m12\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m13\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m14\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m15\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mq\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'mean' is not defined"
          ]
        }
      ]
    },
    {
      "metadata": {
        "id": "pggLSyRBKOeg",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "def data_range(x):\n",
        "    '''Returns the range (i.e. the difference) between the \n",
        "    highest and lowest values\n",
        "    '''\n",
        "    \n",
        "    return max(x) - min(x)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "lfw8Wi25KRRA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "b3cf0048-04a1-4c9a-eb4d-bd622b945c3a"
      },
      "cell_type": "code",
      "source": [
        "data_range([5, 3, 4, 2, 1])"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "metadata": {
        "id": "fVdwXrDWKhRL",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "dad81d19-16ae-4450-88e6-612d5e02bc64"
      },
      "cell_type": "code",
      "source": [
        "data_range(num_defects)\n"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "97"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "metadata": {
        "id": "YTh32zd2dNrq",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import numpy as np"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "iF7neBjzKh3p",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "defects = np.array(num_defects)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "fjKJV-IjddH9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 225
        },
        "outputId": "c8596394-128f-4f09-97ed-5a4d84630b2d"
      },
      "cell_type": "code",
      "source": [
        "defects"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([99, 52, 42, 44, 27, 22, 22, 24, 22, 21, 21, 18, 18, 15, 19, 19, 18,\n",
              "       17, 18, 16, 16, 17, 18, 15, 15, 13, 11, 14, 14, 13, 14, 14, 14, 13,\n",
              "       14, 14, 14, 14, 12, 14, 13, 12, 11, 12, 13, 13, 12, 13, 11, 13, 11,\n",
              "       12, 12, 10, 10, 11, 12, 13, 10, 12, 11, 10, 12, 12, 11, 11,  9,  9,\n",
              "        9, 11, 12,  8,  8, 10,  8, 10, 11, 10,  9, 10, 10,  8,  8, 11, 10,\n",
              "        9,  8,  8, 10, 10,  7,  7,  7,  8,  8,  7,  7,  8,  7,  7,  9,  7,\n",
              "        7, 10,  7,  8,  9,  9,  6,  6,  8,  8,  9,  7,  7,  9,  6,  8,  9,\n",
              "        8,  9,  9,  6,  8,  9,  7,  8,  6,  8,  6,  6,  6,  6,  6,  6,  8,\n",
              "        7,  8,  7,  5,  6,  8,  8,  8,  8,  5,  4,  6,  6,  4,  6,  6,  4,\n",
              "        5,  7,  5,  7,  6,  5,  4,  6,  4,  7,  5,  6,  4,  4,  6,  6,  3,\n",
              "        5,  6,  6,  4,  6,  3,  3,  3,  5,  5,  5,  3,  2,  5,  2,  3,  2,\n",
              "        4,  3,  2,  5,  2,  2,  2,  3,  4,  4,  4,  5,  5,  3,  5,  4,  2])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "metadata": {
        "id": "hVns6SULdkbX",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 3553
        },
        "outputId": "5a99d9c4-8d27-4000-bba7-ea8dc6d7ffe5"
      },
      "cell_type": "code",
      "source": [
        "num_defects"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[99,\n",
              " 52,\n",
              " 42,\n",
              " 44,\n",
              " 27,\n",
              " 22,\n",
              " 22,\n",
              " 24,\n",
              " 22,\n",
              " 21,\n",
              " 21,\n",
              " 18,\n",
              " 18,\n",
              " 15,\n",
              " 19,\n",
              " 19,\n",
              " 18,\n",
              " 17,\n",
              " 18,\n",
              " 16,\n",
              " 16,\n",
              " 17,\n",
              " 18,\n",
              " 15,\n",
              " 15,\n",
              " 13,\n",
              " 11,\n",
              " 14,\n",
              " 14,\n",
              " 13,\n",
              " 14,\n",
              " 14,\n",
              " 14,\n",
              " 13,\n",
              " 14,\n",
              " 14,\n",
              " 14,\n",
              " 14,\n",
              " 12,\n",
              " 14,\n",
              " 13,\n",
              " 12,\n",
              " 11,\n",
              " 12,\n",
              " 13,\n",
              " 13,\n",
              " 12,\n",
              " 13,\n",
              " 11,\n",
              " 13,\n",
              " 11,\n",
              " 12,\n",
              " 12,\n",
              " 10,\n",
              " 10,\n",
              " 11,\n",
              " 12,\n",
              " 13,\n",
              " 10,\n",
              " 12,\n",
              " 11,\n",
              " 10,\n",
              " 12,\n",
              " 12,\n",
              " 11,\n",
              " 11,\n",
              " 9,\n",
              " 9,\n",
              " 9,\n",
              " 11,\n",
              " 12,\n",
              " 8,\n",
              " 8,\n",
              " 10,\n",
              " 8,\n",
              " 10,\n",
              " 11,\n",
              " 10,\n",
              " 9,\n",
              " 10,\n",
              " 10,\n",
              " 8,\n",
              " 8,\n",
              " 11,\n",
              " 10,\n",
              " 9,\n",
              " 8,\n",
              " 8,\n",
              " 10,\n",
              " 10,\n",
              " 7,\n",
              " 7,\n",
              " 7,\n",
              " 8,\n",
              " 8,\n",
              " 7,\n",
              " 7,\n",
              " 8,\n",
              " 7,\n",
              " 7,\n",
              " 9,\n",
              " 7,\n",
              " 7,\n",
              " 10,\n",
              " 7,\n",
              " 8,\n",
              " 9,\n",
              " 9,\n",
              " 6,\n",
              " 6,\n",
              " 8,\n",
              " 8,\n",
              " 9,\n",
              " 7,\n",
              " 7,\n",
              " 9,\n",
              " 6,\n",
              " 8,\n",
              " 9,\n",
              " 8,\n",
              " 9,\n",
              " 9,\n",
              " 6,\n",
              " 8,\n",
              " 9,\n",
              " 7,\n",
              " 8,\n",
              " 6,\n",
              " 8,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 6,\n",
              " 8,\n",
              " 7,\n",
              " 8,\n",
              " 7,\n",
              " 5,\n",
              " 6,\n",
              " 8,\n",
              " 8,\n",
              " 8,\n",
              " 8,\n",
              " 5,\n",
              " 4,\n",
              " 6,\n",
              " 6,\n",
              " 4,\n",
              " 6,\n",
              " 6,\n",
              " 4,\n",
              " 5,\n",
              " 7,\n",
              " 5,\n",
              " 7,\n",
              " 6,\n",
              " 5,\n",
              " 4,\n",
              " 6,\n",
              " 4,\n",
              " 7,\n",
              " 5,\n",
              " 6,\n",
              " 4,\n",
              " 4,\n",
              " 6,\n",
              " 6,\n",
              " 3,\n",
              " 5,\n",
              " 6,\n",
              " 6,\n",
              " 4,\n",
              " 6,\n",
              " 3,\n",
              " 3,\n",
              " 3,\n",
              " 5,\n",
              " 5,\n",
              " 5,\n",
              " 3,\n",
              " 2,\n",
              " 5,\n",
              " 2,\n",
              " 3,\n",
              " 2,\n",
              " 4,\n",
              " 3,\n",
              " 2,\n",
              " 5,\n",
              " 2,\n",
              " 2,\n",
              " 2,\n",
              " 3,\n",
              " 4,\n",
              " 4,\n",
              " 4,\n",
              " 5,\n",
              " 5,\n",
              " 3,\n",
              " 5,\n",
              " 4,\n",
              " 2]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "metadata": {
        "id": "UhYGt4_ZduGW",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "6-adZz7Idudv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "004d34b9-e9f5-42b5-ce17-3ecac6d80f83"
      },
      "cell_type": "code",
      "source": [
        "type(num_defects)"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "list"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "metadata": {
        "id": "9hNSn4rRdz40",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "00e64ad1-cd94-4a15-cfdd-f2a93893bdd9"
      },
      "cell_type": "code",
      "source": [
        "type(defects)"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "numpy.ndarray"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "metadata": {
        "id": "rPWbBYOfeNcN",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "e=defects.mean"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "FuRJgAkDeqgJ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "16999d33-6ccd-4bdf-a462-2c738b5484bd"
      },
      "cell_type": "code",
      "source": [
        "np.mean(defects)"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "9.965686274509803"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 37
        }
      ]
    },
    {
      "metadata": {
        "id": "rZRaadmrhyrB",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "82a1ed7a-3a2f-4b4f-a122-ad988f2b5b8a"
      },
      "cell_type": "code",
      "source": [
        "np.std(defects)"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "8.993123681382077"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        }
      ]
    },
    {
      "metadata": {
        "id": "H8MgBUE7kHwY",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import pandas as pd\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "IdDzQQ2gkXCF",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ">>> import pandas as pd\n",
        ">>> x = pd.Series([6,3,4,6])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "d7zCi3HZlh45",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 104
        },
        "outputId": "41930fff-1f4f-4215-d3ad-3a40aa770f1e"
      },
      "cell_type": "code",
      "source": [
        "x"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    6\n",
              "1    3\n",
              "2    4\n",
              "3    6\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 47
        }
      ]
    },
    {
      "metadata": {
        "id": "jcemcFiombpI",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ">>> x = pd.Series([6,3,4,6], index=['a','b','c','d'])\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "mBwASonum6EL",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 104
        },
        "outputId": "541fc692-35cf-403c-c6a7-614efd3113ea"
      },
      "cell_type": "code",
      "source": [
        "x"
      ],
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "a    6\n",
              "b    3\n",
              "c    4\n",
              "d    6\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 53
        }
      ]
    },
    {
      "metadata": {
        "id": "GZjV8Pw2nA_-",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "59b55fd8-7897-49b0-f2b2-6eeb80f52dac"
      },
      "cell_type": "code",
      "source": [
        "x['d']"
      ],
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 54
        }
      ]
    },
    {
      "metadata": {
        "id": "VkXcW0nhngiu",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "dates = pd.date_range('20170505', periods = 8)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "Gw5ILgeQnrK7",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        },
        "outputId": "a5779e5e-e8e9-40ff-d405-f1f69e624df1"
      },
      "cell_type": "code",
      "source": [
        "dates"
      ],
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DatetimeIndex(['2017-05-05', '2017-05-06', '2017-05-07', '2017-05-08',\n",
              "               '2017-05-09', '2017-05-10', '2017-05-11', '2017-05-12'],\n",
              "              dtype='datetime64[ns]', freq='D')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 56
        }
      ]
    },
    {
      "metadata": {
        "id": "iriOHYr6oSeJ",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ">>> df = pd.DataFrame(np.random.randn(8,3), index=dates, columns=list('ABC'))\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "7OkMcZkPoaQp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 294
        },
        "outputId": "c3dd54a2-569c-4b62-9fc6-76b87d43ff62"
      },
      "cell_type": "code",
      "source": [
        "df"
      ],
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "      <th>C</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2017-05-05</th>\n",
              "      <td>0.675538</td>\n",
              "      <td>-1.258352</td>\n",
              "      <td>0.245546</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-05-06</th>\n",
              "      <td>-0.736835</td>\n",
              "      <td>0.447605</td>\n",
              "      <td>1.561925</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-05-07</th>\n",
              "      <td>-0.037629</td>\n",
              "      <td>1.147716</td>\n",
              "      <td>-0.396713</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-05-08</th>\n",
              "      <td>0.793291</td>\n",
              "      <td>0.818248</td>\n",
              "      <td>-1.739533</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-05-09</th>\n",
              "      <td>0.309968</td>\n",
              "      <td>0.556347</td>\n",
              "      <td>0.377917</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-05-10</th>\n",
              "      <td>-0.309023</td>\n",
              "      <td>-1.362815</td>\n",
              "      <td>-0.130508</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-05-11</th>\n",
              "      <td>-0.112002</td>\n",
              "      <td>-0.590973</td>\n",
              "      <td>-1.615091</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-05-12</th>\n",
              "      <td>1.239721</td>\n",
              "      <td>1.163615</td>\n",
              "      <td>0.582782</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                   A         B         C\n",
              "2017-05-05  0.675538 -1.258352  0.245546\n",
              "2017-05-06 -0.736835  0.447605  1.561925\n",
              "2017-05-07 -0.037629  1.147716 -0.396713\n",
              "2017-05-08  0.793291  0.818248 -1.739533\n",
              "2017-05-09  0.309968  0.556347  0.377917\n",
              "2017-05-10 -0.309023 -1.362815 -0.130508\n",
              "2017-05-11 -0.112002 -0.590973 -1.615091\n",
              "2017-05-12  1.239721  1.163615  0.582782"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 58
        }
      ]
    }
  ]
}